;; Problem one:
;;
;; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.

(defun euler-one(n)
  (if (= n 0)
      0
      (if (or (= (mod n 3) 0)(= (mod n 5) 0))
	  (+ n (euler-one(- n 1)))
          (euler-one(- n 1))))))

;; Problem two:
;;
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(defun euler-two(n)
  (let ((current 1) (last 1) (total 0) temp)
    (loop while (<= current  n) do
	 (if (= (mod current 2) 0)
	     (setf total (+ current total)))
       (setf temp current)
       (setf current (+ last current))
       (setf last temp)
       collect total)))

;; Problem three:
;;
;; The prime factors of 13195 are 5, 7, 13 and 29.
;;
;; What is the largest prime factor of the number 600851475143 ?

(defun euler-three(n &optional (factor 2))
  (if (> n factor)
    (if (= (mod n factor) 0)
      (list factor (euler-three (/ n factor) factor))
      (euler-three n (+ factor 1)))
    n))

;; Problem four:
;;
;; A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
;;
;; Find the largest palindrome made from the product of two 3-digit numbers.

;; n is number of digits
(defun euler-four(n)
  (let ((largest-palindrome 0))
    (loop for i from 1 to n do
       (loop for j from 1 to n
	  when (palindrome (* j i)) do
	    (if (< largest-palindrome (* j i))
		(setf largest-palindrome (* j i)))))
    largest-palindrome))

(defun palindrome(n)
  (= n (reverse-integer n)))

(defun reverse-integer(n)
  (let ((num n) (rev 0) dig)
    (loop while (> num 0) do
	 (setf dig (mod num 10))
	 (setf rev (+ (* rev 10) dig))
	 (setf num (floor num 10)))
    rev))

;; Problem five:
;;
;;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
;;
;;What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

(defun euler-five(n)
  (let ((result ()))
    (loop for x from n downto (+ (floor n 2) 1) do
	 (setf result (union-duplicates (prime-factorization x) result)))
    (apply '* result)))

(defun union-duplicates(one two)
  (let ((full one) (empty one))
    (loop for i in two when (not (member i empty)) do
	 (setf full (cons i full)) when (member i empty) do
	 (setf empty (remove i empty :count 1)))
    full))

(defun prime-factorization(n)
  (loop for x from 2 to n when (= (mod n x) 0)
       collect x when (= (mod n x) 0) do
       (setf n (/ n x))
       (setf x (- x 1))))

;; Problem six:
;;
;; The sum of the squares of the first ten natural numbers is,
;;
;;     1^2 + 2^2 + ... + 10^2 = 385
;;
;; The square of the sum of the first ten natural numbers is,
;;
;;     (1 + 2 + ... + 10)^2 = 55^2 = 3025
;;
;; Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
;;
;; Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

(defun euler-six(n)
  (let ((sum-squares 0) (square-sums 0))
    (loop for i from 1 to n do
	 (setf sum-squares (+ sum-squares (expt i 2)))
	 (setf square-sums (+ square-sums i)))
    (setf square-sums (expt square-sums 2))
    (- square-sums sum-squares)))

;; Problem seven:
;;
;; By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
;;
;; What is the 10 001st prime number?

(defun euler-seven(n)
  (let ((primes '()) (next-prime 2))
    (loop while (> n 0) do
	 (setf primes (cons next-prime primes))
	 (setf n (- n 1))
	 (setf next-prime (+ next-prime 1))
	 (loop while (is-divisible-by-list next-prime primes) do
	      (setf next-prime (+ next-prime 1))))
    primes))

(defun is-divisible-by-list(n divisible-list)
  (let ((bool nil))
    (loop for i in divisible-list do
	 (if (= (mod n i) 0)
	     (setf bool t)))
    bool))

;; Problem eight:

;; Problem nine:
;;
;; A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
;;
;;     a^2 + b^2 = c^2
;;
;;For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
;;
;;There exists exactly one Pythagorean triplet for which a + b + c = 1000.
;;Find the product abc.

(defun euler-nine(n)
  (let ((x 0))
    (loop for a from 1 to (/ n 2) do
	 (loop for b from a to (/ n 2) do
	      (if (= (+ a b (sqrt (+ (expt a 2) (expt b 2)))) n)
		  (setf x (* a b (sqrt (+ (expt a 2) (expt b 2))))))))
    (round x)))

;; Problem ten:
;;
;; The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
;;
;; Find the sum of all the primes below two million.

(defun euler-ten (n)
  (let ((primes '()))
    (loop for x from 2 to n do
	 (setf primes (cons x primes)))
    (loop for x in primes do
	 (loop for y in primes when (and (= 0 (mod y x)) (/= x y)) do
	      (setf primes (remove y primes))))
    (apply '+ primes)))
